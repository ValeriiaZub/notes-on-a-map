# Task 1.5 - Data Management and Supabase Integration

## Success Criteria

1. Real-time Subscriptions
   - [ ] Set up Supabase real-time channel for notes table
   - [ ] Implement subscription for note changes
   - [ ] Handle real-time updates in UI
   - [ ] Add reconnection handling
   - [ ] Implement subscription cleanup

2. Offline Support
   - [ ] Implement local storage for offline notes
   - [ ] Create queue for pending changes
   - [ ] Add background sync functionality
   - [ ] Handle conflict resolution
   - [ ] Implement retry mechanism for failed operations

3. Data Synchronization
   - [ ] Create sync manager service
   - [ ] Implement optimistic updates
   - [ ] Add merge strategy for conflicts
   - [ ] Track sync status per note
   - [ ] Add manual sync trigger option

4. Data Validation
   - [ ] Add input validation
   - [ ] Implement server-side validation
   - [ ] Add content sanitization
   - [ ] Validate coordinates
   - [ ] Add error messages for validation failures

5. Error Handling
   - [ ] Implement error boundaries
   - [ ] Add retry mechanisms
   - [ ] Create error recovery strategies
   - [ ] Add user-friendly error messages
   - [ ] Implement logging for errors

## Implementation Plan

1. Supabase Integration
   ```typescript
   interface NoteManager {
     // Create a new note
     createNote: (note: Omit<Note, 'id'>) => Promise<Note>
     
     // Update an existing note
     updateNote: (note: Note) => Promise<Note>
     
     // Delete a note
     deleteNote: (noteId: string) => Promise<void>
     
     // Get all notes for current user
     getNotes: () => Promise<Note[]>
     
     // Subscribe to note changes
     subscribeToNotes: (callback: (notes: Note[]) => void) => () => void
   }

   interface SyncManager {
     // Queue changes for sync
     queueChange: (change: NoteChange) => void
     
     // Start sync process
     sync: () => Promise<void>
     
     // Get sync status
     getSyncStatus: () => SyncStatus
     
     // Handle conflicts
     resolveConflict: (note: Note, strategy: ConflictStrategy) => Promise<Note>
   }

   interface OfflineStorage {
     // Save note locally
     saveNote: (note: Note) => Promise<void>
     
     // Get all local notes
     getLocalNotes: () => Promise<Note[]>
     
     // Clear local storage
     clearStorage: () => Promise<void>
     
     // Get pending changes
     getPendingChanges: () => Promise<NoteChange[]>
   }
   ```

2. Database Schema Updates
   ```sql
   -- Add sync related columns
   alter table notes add column
     sync_status text check (sync_status in ('synced', 'pending', 'conflict')) 
     default 'synced';

   alter table notes add column
     last_synced_at timestamp with time zone;

   alter table notes add column
     version integer default 1;

   -- Add indexes for better performance
   create index notes_user_id_created_at_idx 
     on notes(user_id, created_at);

   create index notes_sync_status_idx 
     on notes(sync_status);
   ```

3. Error Recovery Strategy
   ```typescript
   interface ErrorRecovery {
     // Maximum retry attempts
     MAX_RETRIES: number
     
     // Retry intervals (in ms)
     RETRY_INTERVALS: number[]
     
     // Error categories
     ErrorCategory: {
       NETWORK: 'network'
       VALIDATION: 'validation'
       PERMISSION: 'permission'
       UNKNOWN: 'unknown'
     }
     
     // Recovery actions
     RecoveryAction: {
       RETRY: 'retry'
       ROLLBACK: 'rollback'
       IGNORE: 'ignore'
       MANUAL: 'manual'
     }
   }
   ```

## Testing Strategy

1. Unit Tests
   - Test note CRUD operations
   - Validate sync logic
   - Test offline storage
   - Verify error handling

2. Integration Tests
   - Test real-time subscriptions
   - Verify sync conflicts
   - Test offline/online transitions
   - Validate data persistence

3. E2E Tests
   - Complete offline workflow
   - Sync recovery scenarios
   - Error handling flows
   - Performance testing

## Success Metrics

1. Performance
   - Note operations < 200ms
   - Sync operations < 2s
   - Offline storage < 100ms

2. Reliability
   - 99.9% sync success rate
   - Zero data loss
   - 100% error recovery

3. User Experience
   - Seamless offline/online transition
   - No UI blocking during sync
   - Clear error feedback

## Dependencies
- @supabase/supabase-js
- @tanstack/react-query (for cache management)
- idb (for IndexedDB wrapper)
- zod (for validation)
- date-fns (for timestamp handling) 